---
- name: Retrieve latest release information from github
  ansible.builtin.uri:
    url: https://api.github.com/repos/sharkdp/bat/releases/latest
    method: GET
    return_content: true
  register: bat_github_response

- name: Select download url from json response
  ansible.builtin.set_fact:
    bat_download_url: "{{ 0 | extract(bat_github_response.json | community.general.json_query(url_query)) }}"
  vars:
    url_query: assets[?ends_with(browser_download_url,'x86_64-unknown-linux-gnu.tar.gz')].browser_download_url

- name: Get directory name for content in tarball
  ansible.builtin.set_fact:
    bat_directory: "{{ bat_download_url | regex_search('bat-.+-x86_64-unknown-linux-gnu') }}"

- name: Download bat tarball
  ansible.builtin.get_url:
    url: "{{ bat_download_url }}"
    dest: "/tmp/{{ bat_directory }}.tar.gz"
    mode: "0644"
  register: download_status

- name: Remove existing bat installation
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.local/opt/bat/"
    state: absent
  when: download_status.changed # Remove only if the tarball was re-downloaded

- name: Extract bat files
  ansible.builtin.unarchive:
    src: "/tmp/{{ bat_directory }}.tar.gz"
    dest: /tmp
    remote_src: yes
  when: download_status.changed # Extract only if the tarball was re-downloaded

- name: Install bat files
  copy:
    src: "/tmp/{{ bat_directory }}/"
    dest: "{{ ansible_env.HOME }}/.local/opt/bat/"
    remote_src: yes
  when: download_status.changed # Create only if the tarball was re-downloaded

- name: Create symlink to binary
  ansible.builtin.file:
    src: "{{ ansible_env.HOME }}/.local/opt/bat/bat"
    dest: "{{ ansible_env.HOME }}/.local/bin/bat"
    state: link
    force: yes

- name: Clean up downloaded tarball
  ansible.builtin.file:
    path: "/tmp/{{ bat_directory }}.tar.gz"
    state: absent

- name: Clean up downloaded tarball extract
  ansible.builtin.file:
    path: "/tmp/{{ bat_directory }}"
    state: absent

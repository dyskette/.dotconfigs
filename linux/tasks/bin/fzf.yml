---
- name: Retrieve latest release information from github
  ansible.builtin.uri:
    url: https://api.github.com/repos/junegunn/fzf/releases/latest
    method: GET
    return_content: true
  register: fzf_github_response

- name: Select download url from json response
  ansible.builtin.set_fact:
    fzf_download_url: "{{ 0 | extract(fzf_github_response.json | community.general.json_query(url_query)) }}"
  vars:
    url_query: assets[?ends_with(browser_download_url,'linux_amd64.tar.gz')].browser_download_url

- name: Get directory name for content in tarball
  ansible.builtin.set_fact:
    fzf_directory: "{{ fzf_download_url | regex_search('fzf-.+-linux_amd64') }}"

- name: Download fzf tarball
  ansible.builtin.get_url:
    url: "{{ fzf_download_url }}"
    dest: "/tmp/{{ fzf_directory }}.tar.gz"
    mode: "0644"
  register: download_status

- name: Remove existing fzf installation
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.local/opt/fzf"
    state: absent
  when: download_status.changed # Remove only if the tarball was re-downloaded

- name: Create fzf directory
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.local/opt/fzf"
    state: directory
  when: download_status.changed # Create only if the tarball was re-downloaded

- name: Extract fzf files to /tmp
  ansible.builtin.unarchive:
    src: "/tmp/{{ fzf_directory }}.tar.gz"
    dest: "{{ ansible_env.HOME }}/.local/opt/fzf/"
    remote_src: yes
  when: download_status.changed # Extract only if the tarball was re-downloaded

- name: Create symlink to binary
  ansible.builtin.file:
    src: "{{ ansible_env.HOME }}/.local/opt/fzf/fzf"
    dest: "{{ ansible_env.HOME }}/.local/bin/fzf"
    state: link
    force: yes

- name: Clean up downloaded tarball
  ansible.builtin.file:
    path: "/tmp/{{ fzf_directory }}.tar.gz"
    state: absent

---
- name: Retrieve latest release information from github
  ansible.builtin.uri:
    url: https://api.github.com/repos/BurntSushi/ripgrep/releases/latest
    method: GET
    return_content: true
  register: ripgrep_github_response

- name: Select download url from json response
  ansible.builtin.set_fact:
    ripgrep_download_url: "{{ 0 | extract(ripgrep_github_response.json | community.general.json_query(url_query)) }}"
  vars:
    url_query: assets[?ends_with(browser_download_url,'x86_64-unknown-linux-musl.tar.gz')].browser_download_url

- name: Get directory name for content in tarball
  ansible.builtin.set_fact:
    ripgrep_directory: "{{ ripgrep_download_url | regex_search('ripgrep-.+-musl') }}"

- name: Download ripgrep tarball
  ansible.builtin.get_url:
    url: "{{ ripgrep_download_url }}"
    dest: "/tmp/{{ ripgrep_directory }}.tar.gz"
    mode: "0644"
  register: download_status

- name: Remove existing ripgrep installation
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.local/opt/ripgrep"
    state: absent
  when: download_status.changed # Remove only if the tarball was re-downloaded

- name: Extract ripgrep files to /tmp
  ansible.builtin.unarchive:
    src: "/tmp/{{ ripgrep_directory }}.tar.gz"
    dest: /tmp
    remote_src: yes
  when: download_status.changed # Extract only if the tarball was re-downloaded

- name: Install ripgrep files
  ansible.builtin.copy:
    src: "/tmp/{{ ripgrep_directory }}/"
    dest: "{{ ansible_env.HOME }}/.local/opt/ripgrep/"
    remote_src: yes
  when: download_status.changed # Create only if the tarball was re-downloaded

- name: Create symlink to binary
  ansible.builtin.file:
    src: "{{ ansible_env.HOME }}/.local/opt/ripgrep/rg"
    dest: "{{ ansible_env.HOME }}/.local/bin/rg"
    state: link
    force: yes

- name: Clean up downloaded tarball
  ansible.builtin.file:
    path: "/tmp/{{ ripgrep_directory }}.tar.gz"
    state: absent

---
- name: Windows Configuration Playbook
  hosts: localhost
  gather_facts: true
  connection: local

  tasks:
    - name: Install JetBrains Mono NL Nerd Font
      ansible.windows.win_powershell:
        script: "{{ playbook_dir }}/windows-ansible/Install-JetBrainsFont.ps1"
      tags:
        - fonts
        - jetbrains-font

    - name: Install Chocolatey
      ansible.windows.win_command: winget install --exact --id Chocolatey.Chocolatey --source winget --silent --accept-source-agreements --accept-package-agreements
      register: chocolatey_install_result
      failed_when: chocolatey_install_result.rc != 0 and "already installed" not in chocolatey_install_result.stderr
      changed_when: chocolatey_install_result.rc == 0 and "already installed" not in chocolatey_install_result.stderr
      tags:
        - chocolatey
        - package-managers

    - name: Update Chocolatey environment variables
      ansible.windows.win_powershell:
        script: "{{ playbook_dir }}/windows-ansible/Update-ChocolateyEnvironment.ps1"
      tags:
        - chocolatey
        - package-managers

    - name: Install MinGW via Chocolatey
      ansible.windows.win_command: choco install mingw --yes
      register: mingw_install_result
      failed_when: mingw_install_result.rc != 0 and "already installed" not in mingw_install_result.stdout
      changed_when: mingw_install_result.rc == 0 and "already installed" not in mingw_install_result.stdout
      tags:
        - mingw
        - development
        - compilers

    - name: Install Deno
      ansible.windows.win_command: winget install --exact --id DenoLand.Deno --silent --accept-source-agreements --accept-package-agreements
      register: deno_install_result
      failed_when: deno_install_result.rc != 0 and "already installed" not in deno_install_result.stderr
      changed_when: deno_install_result.rc == 0 and "already installed" not in deno_install_result.stderr
      tags:
        - deno
        - development
        - runtimes

    - name: Install command-line utilities
      ansible.windows.win_command: "winget install --exact --id {{ item }} --silent --accept-source-agreements --accept-package-agreements"
      register: cli_tools_install_result
      failed_when: cli_tools_install_result.rc != 0 and "already installed" not in cli_tools_install_result.stderr
      changed_when: cli_tools_install_result.rc == 0 and "already installed" not in cli_tools_install_result.stderr
      loop:
        - ezwinports.make
        - JernejSimoncic.Wget
        - Wilfred.difftastic
        - jftuga.less
        - jqlang.jq
        - MikeFarah.yq
        - junegunn.fzf
        - sharkdp.fd
        - eza-community.eza
        - BurntSushi.ripgrep.MSVC
        - sharkdp.bat
        - Gyan.FFmpeg
        - Starship.Starship
      tags:
        - cli-tools
        - utilities
        - development

    - name: Install PowerShell Core
      ansible.windows.win_command: winget install --exact --id Microsoft.PowerShell --silent --accept-source-agreements --accept-package-agreements
      register: powershell_install_result
      failed_when: powershell_install_result.rc != 0 and "already installed" not in powershell_install_result.stderr
      changed_when: powershell_install_result.rc == 0 and "already installed" not in powershell_install_result.stderr
      tags:
        - powershell
        - shells
        - development

    - name: Install fnm (Fast Node Manager)
      ansible.windows.win_command: winget install --exact --id Schniz.fnm --silent --accept-source-agreements --accept-package-agreements
      register: fnm_install_result
      failed_when: fnm_install_result.rc != 0 and "already installed" not in fnm_install_result.stderr
      changed_when: fnm_install_result.rc == 0 and "already installed" not in fnm_install_result.stderr
      tags:
        - fnm
        - development
        - version-managers

    - name: Setup Node.js LTS via fnm
      ansible.windows.win_powershell:
        script: "{{ playbook_dir }}/windows-ansible/Setup-NodeLTS.ps1"
      register: node_lts_result
      tags:
        - fnm
        - development
        - version-managers

    - name: Install Python 3.12
      ansible.windows.win_command: winget install --exact --id Python.Python.3.12 --silent --accept-source-agreements --accept-package-agreements
      register: python_install_result
      failed_when: python_install_result.rc != 0 and "already installed" not in python_install_result.stderr
      changed_when: python_install_result.rc == 0 and "already installed" not in python_install_result.stderr
      tags:
        - python
        - development
        - runtimes

    - name: Install Neovim
      ansible.windows.win_command: winget install --exact --id Neovim.Neovim --silent --accept-source-agreements --accept-package-agreements
      register: neovim_install_result
      failed_when: neovim_install_result.rc != 0 and "already installed" not in neovim_install_result.stderr
      changed_when: neovim_install_result.rc == 0 and "already installed" not in neovim_install_result.stderr
      tags:
        - neovim
        - editors
        - development

    - name: Install Windows Terminal
      ansible.windows.win_command: winget install --exact --id Microsoft.WindowsTerminal --silent --accept-source-agreements --accept-package-agreements
      register: windows_terminal_install_result
      failed_when: windows_terminal_install_result.rc != 0 and "already installed" not in windows_terminal_install_result.stderr
      changed_when: windows_terminal_install_result.rc == 0 and "already installed" not in windows_terminal_install_result.stderr
      tags:
        - windows-terminal
        - terminals
        - apps

    - name: Install Yazi file manager
      ansible.windows.win_command: winget install --exact --id sxyazi.yazi --silent --accept-source-agreements --accept-package-agreements
      register: yazi_install_result
      failed_when: yazi_install_result.rc != 0 and "already installed" not in yazi_install_result.stderr
      changed_when: yazi_install_result.rc == 0 and "already installed" not in yazi_install_result.stderr
      tags:
        - yazi
        - cli-tools
        - file-manager

    - name: Install Visual Studio Code
      ansible.windows.win_command: winget install --exact --id Microsoft.VisualStudioCode --silent --accept-source-agreements --accept-package-agreements
      register: vscode_install_result
      failed_when: vscode_install_result.rc != 0 and "already installed" not in vscode_install_result.stderr
      changed_when: vscode_install_result.rc == 0 and "already installed" not in vscode_install_result.stderr
      tags:
        - vscode
        - apps

    - name: VS Code extensions
      block:
        - name: VS Code extensions | Set common facts
          ansible.builtin.set_fact:
            extensions_file: "{{ playbook_dir | dirname }}/vscode/extensions.json"

        - name: VS Code extensions | Check if extensions.json exists
          ansible.windows.win_stat:
            path: "{{ extensions_file }}"
          register: extensions_file_stat

        - name: VS Code extensions | Load extensions.json
          ansible.builtin.set_fact:
            extensions: "{{ lookup('file', extensions_file) | from_json }}"
          when: extensions_file_stat.stat.exists

        - name: VS Code extensions | Install extensions
          ansible.windows.win_command: code --install-extension "{{ item }}"
          loop: "{{ extensions.extensions }}"
          register: extension_install_results
          failed_when: false  # Don't fail if extension install fails
          changed_when: "'already installed' not in extension_install_results.stderr"
          when: extensions_file_stat.stat.exists
      tags:
        - vscode-extensions
        - extensions

    - name: Install productivity applications
      ansible.windows.win_command: "winget install --exact --id {{ item }} --silent --accept-source-agreements --accept-package-agreements"
      register: productivity_apps_install_result
      failed_when: productivity_apps_install_result.rc != 0 and "already installed" not in productivity_apps_install_result.stderr
      changed_when: productivity_apps_install_result.rc == 0 and "already installed" not in productivity_apps_install_result.stderr
      loop:
        - Obsidian.Obsidian
        - Mozilla.Firefox
        - KeePassXCTeam.KeePassXC
        - Dropbox.Dropbox
      tags:
        - productivity-apps
        - apps
        - utilities

    - name: Configure Windows settings
      ansible.windows.win_powershell:
        script: "{{ playbook_dir }}/windows-ansible/Configure-WindowsSettings.ps1"
      register: windows_config_result
      tags:
        - windows-config
        - system-settings
        - configuration

    # Configuration Tasks
    - name: Configure bat
      ansible.windows.win_powershell:
        script: "{{ playbook_dir }}/windows-ansible/Configure-Bat.ps1"
      register: bat_config_result
      tags:
        - bat-config
        - configuration
        - cli-tools

    - name: Configure PowerShell
      ansible.windows.win_powershell:
        script: "{{ playbook_dir }}/windows-ansible/Configure-PowerShell.ps1"
      register: powershell_config_result
      tags:
        - powershell-config
        - configuration
        - shells

    - name: Configure Starship
      ansible.windows.win_powershell:
        script: "{{ playbook_dir }}/windows-ansible/Configure-Starship.ps1"
      register: starship_config_result
      tags:
        - starship-config
        - configuration
        - cli-tools

    - name: Configure Neovim
      ansible.windows.win_powershell:
        script: "{{ playbook_dir }}/windows-ansible/Configure-Neovim.ps1"
      register: neovim_config_result
      tags:
        - neovim-config
        - configuration
        - editors

    - name: Configure VS Code
      ansible.windows.win_powershell:
        script: "{{ playbook_dir }}/windows-ansible/Configure-VSCode.ps1"
      register: vscode_config_result
      tags:
        - vscode-config
        - configuration
        - editors

    - name: Configure Windows Terminal
      ansible.windows.win_powershell:
        script: "{{ playbook_dir }}/windows-ansible/Configure-WindowsTerminal.ps1"
      register: windows_terminal_config_result
      tags:
        - windows-terminal-config
        - configuration
        - terminals
